Remove-Item (Get-PSReadlineOption).HistorySavePath

	public void Scaling(Graphics g,int x[],int y[],int sx,int sy)
	{
		int n = x.length;
		for(int i=0;i<n;i++)
		{
			x[i] = (int)(x[i] * sx);
			y[i] = (int)(y[i] * sy);
		}
	}
	public void Shear(Graphics g,double a[][],int shx,int shy)
	{
		int n = a.length;
		double x,y;
		for(int i=0;i<n;i++)
		{
			x = a[i][0] - centerX;
			y = a[i][1] - centerY;
			if(shx>0)
			{
				a[i][0] = x + y*shx;
				a[i][1] = y;
			}
			else if(shy>0)
			{
				a[i][0] = x;
				a[i][1] = y + x*shy;
			}
			else{
				a[i][0] = x + y*shx;
				a[i][1] = y + x*shy;
			}
			a[i][0] += centerX;
			a[i][1] += centerY;
		}
	}	
	public void drawObj(Graphics g,int x[],int y[])
	{
		int n = x.length;
		for(int i=0;i<n;i++)
		{
			if(i<n-1)
			{
				drawLine(g,x[i],y[i],x[i+1],y[i+1]);
			}
			else{
				drawLine(g,x[i],y[i],x[0],y[0]);
			}
		}
	}
	public void Translation(Graphics g,int x[],int y[],int tx,int ty)
	{
		for(int i=0;i<x.length;i++)
		{
			x[i] += tx;
		}
		for(int i=0;i<y.length;i++)
		{
			y[i] += ty;
		}
	}

public void Reflect(Graphics g,int x_coordinate,int y_coordinate,double a[][])
	{
		for(int i=0;i<a.length;i++)
		{
			double x = a[i][0]-x_coordinate;
			double y = a[i][1]-y_coordinate;
			if(y_coordinate == 0)
			{
				a[i][0] = (x * (-1))+x_coordinate;
			}
			else if(x_coordinate == 0)
			{
				a[i][1] = (y * (-1))+y_coordinate;
			}
			else{
				a[i][0] = (x * (-1))+x_coordinate;
				a[i][1] = (y * (-1))+y_coordinate;
			}
			
		}
	}



void Rotation(Graphics g, int x0, int y0, double P[][], double angle) {
        double cosTheta = Math.cos(Math.toRadians(angle));
        double sinTheta = Math.sin(Math.toRadians(angle));

        for (int i = 0; i < P.length; i++) {
            double x = P[i][0] - x0;
            double y = P[i][1] - y0;

            P[i][0] = x * cosTheta - y * sinTheta + x0;
            P[i][1] = x * sinTheta + y * cosTheta + y0;
        }
    }


void drawCircle(Graphics g,int x,int y,int x_coordinate,int y_coordinate)
	{
	     g.fillOval((int)(x+x_coordinate),(int)(y+y_coordinate),5,5);
		 g.fillOval((int)(y+x_coordinate),(int)(x+y_coordinate),5,5);
		 g.fillOval((int)(y+x_coordinate),(int)(-x+y_coordinate),5,5);
		 g.fillOval((int)(x+x_coordinate),(int)(-y+y_coordinate),5,5);
		 g.fillOval((int)(-x+x_coordinate),(int)(-y+y_coordinate),5,5);
		 g.fillOval((int)(-y+x_coordinate),(int)(-x+y_coordinate),5,5);
		 g.fillOval((int)(-x+x_coordinate),(int)(y+y_coordinate),5,5);
		 g.fillOval((int)(-y+x_coordinate),(int)(x+y_coordinate),5,5);
	}
	void MidPointCircle(Graphics g,int x_coordinate, int y_coordinate, int radious)
	{
		int d = 1-radious;
		int x = 0;int y = radious;
		drawCircle(g,x,y,x_coordinate,y_coordinate);
		while(x<=y)
		{
			if(d<0)
			{
				d += 2*x + 3;
			}
			else{
				y--;
				d += 2*(x-y)+5;
			}
			x++;
			drawCircle(g,x,y,x_coordinate,y_coordinate);
		}
	}


	void drawCircle(Graphics g,int x,int y,int x_coordinate,int y_coordinate)
	{
		g.fillOval((x+x_coordinate),(y+y_coordinate),5,5);
		g.fillOval((y+x_coordinate),(x+y_coordinate),5,5);
		g.fillOval((x+x_coordinate),(-y+y_coordinate),5,5);
		g.fillOval((y+x_coordinate),(-x+y_coordinate),5,5);
		g.fillOval((-x+x_coordinate),(-y+y_coordinate),5,5);
		g.fillOval((-y+x_coordinate),(-x+y_coordinate),5,5);
		g.fillOval((-x+x_coordinate),(y+y_coordinate),5,5);
		g.fillOval((-y+x_coordinate),(x+y_coordinate),5,5);
	}
	void Bresenham_Circle(Graphics g,int x_coordinate,int y_coordinate,int radious)
	{
		int d = 3-2*radious;
		int x = 0;int y = radious;
		drawCircle(g,x,y,x_coordinate,y_coordinate);
		while(x<=y)
		{
			if(d<0)
			{
				d+=4*x+6;
			}
			else{
				y--;
				d+=4*(x-y)+10;
			}
			x++;
			drawCircle(g,x,y,x_coordinate,y_coordinate);
		}
	}



void DDA(Graphics g,int x1, int y1, int x2, int y2)
	{
		int dx = x2-x1;
		int dy = y2-y1;
		int step;
		double inc1,inc2,x,y;
		if(Math.abs(dx)>Math.abs(dy))
		{
			step = Math.abs(dx);
		}
		else
		{
			step = Math.abs(dy);
		}
		x = x1;
		y = y1;
		inc1 = (double)(dx/step);
		inc2 = (double)(dy/step);
		g.fillOval(Math.round((int)x),Math.round((int)y),5,5);
		for(int i=1;i<=step;i++)
		{
			y = y+inc2;
			x = x+inc1;
			g.fillOval(Math.round((int)x),Math.round((int)y),5,5);
		}
		
	}



void BresenhamLine(Graphics g,int x1,int y1,int x2,int y2)
	{
		int dx,dy,d,inc1,inc2,x,y,end;
		dx = Math.abs(x2 - x1);
		dy = Math.abs(y2 - y1);
		int sx = x2-x1>0?1:-1;
		int sy = y2-y1>0?1:-1;
		if(dy/dx<1)
		{
			d = 2*dy - dx;
			inc1 = 2*dy;
			inc2 = 2*dy - 2*dx;
			
			g.fillOval(x1,y1,5,5);
			while(x2>x1)
			{
				if(d<0)
				{
					d += inc1;
				}
				else{
					y1+=sy;
					d += inc2;
				}
				x1 += sx;
				g.fillOval(x1,y1,5,5);
			}
		}
		else{
			d = 2*dx - dy;
			inc1 = 2*dx;
			inc2 = 2*dx - 2*dy;
			g.fillOval(x1,y1,5,5);
			while(y2>y1)
			{
				if(d<0)
				{
					d += inc1;
				}
				else{
					x1+=sx;
					d += inc2;
				}
				y1 += sy;
				g.fillOval(x1,y1,5,5);
			}
		}
	}


void BresenhamAll(Graphics g,int x1, int y1, int x2, int y2) {
        int dx = Math.abs(x2 - x1);
        int dy = Math.abs(y2 - y1);
        int sx = (x1 < x2) ? 1 : -1;
        int sy = (y1 < y2) ? 1 : -1;
        int err = dx - dy;

        while (true) {
			
			g.fillOval((int)x1,(int)y1,5,5);
            if (x1 == x2 && y1 == y2) {
                break;
            }

            int e2 = 2 * err;
            if (e2 > -dy) {
                err -= dy;
                x1 += sx;
            }
            if (e2 < dx) {
                err += dx;
                y1 += sy;
            }
        }
  }



void BasicInc(Graphics g,double x1, double y1, double x2, double y2)
	{
		double dx,dy,m,rv;
		int x,y;
		dx = x2-x1;
		dy = y2-y1;
		if(dx != 0)
		{
			m = dy/dx;
			rv= y1;
			for(x=(int)Math.round(x1);x<= Math.round(x2);x++)
			{
				y=(int)Math.round(rv);
				g.fillOval((int)x,(int)y,5,5);
				rv+=m;
			}
		}
		else{
			if(dy == 0)
			{
				g.fillOval((int)x1,(int)y1,5,5);
			}
			else{
				y=(int)y1>(int)y2?(int)y2:(int)y1;
				for(;y<Math.abs(dy);y++)
				{
					g.fillOval((int)x1,(int)y,5,5);
				}
			}
		}
	}
	



	
